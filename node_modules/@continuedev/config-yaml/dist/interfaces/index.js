import { SecretType } from "./SecretResult.js";
export async function resolveFQSN(currentUserSlug, fqsn, platformSecretStore) {
    // First create the list of secret locations to try in order
    const reversedSlugs = [...fqsn.packageSlugs].reverse();
    const locationsToLook = [
        // Packages first
        ...reversedSlugs.map((slug) => ({
            secretType: SecretType.Package,
            packageSlug: slug,
            secretName: fqsn.secretName,
        })),
        // Then user
        {
            secretType: SecretType.User,
            userSlug: currentUserSlug,
            secretName: fqsn.secretName,
        },
        // Then organization
        ...reversedSlugs.map((slug) => ({
            secretType: SecretType.Organization,
            orgSlug: slug.ownerSlug,
            secretName: fqsn.secretName,
        })),
    ];
    // Then try to get the secret from each location
    for (const secretLocation of locationsToLook) {
        const secret = await platformSecretStore.getSecretFromSecretLocation(secretLocation);
        if (secret) {
            if (secretLocation.secretType === SecretType.User) {
                // Only user secret values get sent back to client
                return {
                    found: true,
                    fqsn,
                    secretLocation,
                    value: secret,
                };
            }
            else if (secretLocation.secretType !== SecretType.NotFound) {
                return {
                    found: true,
                    fqsn,
                    secretLocation,
                };
            }
        }
    }
    return {
        found: false,
        secretLocation: {
            secretName: fqsn.secretName,
            secretType: SecretType.NotFound,
        },
        fqsn,
    };
}
