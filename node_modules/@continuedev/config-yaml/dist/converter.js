function convertModel(m, roles) {
    return {
        name: m.title,
        provider: m.provider,
        model: m.model,
        apiKey: m.apiKey,
        apiBase: m.apiBase,
        roles,
        requestOptions: m.requestOptions,
        defaultCompletionOptions: m.completionOptions,
    };
}
function convertEmbeddingsProvider(m) {
    return {
        name: "Embeddings Model",
        provider: m.provider,
        model: m.model ?? "",
        apiKey: m.apiKey,
        apiBase: m.apiBase,
        roles: ["embed"],
    };
}
function convertReranker(m) {
    return {
        name: "Reranker",
        provider: m.name,
        model: m.params?.model ?? "",
        apiKey: m.params?.apiKey,
        apiBase: m.params?.apiBase,
        roles: ["rerank"],
    };
}
function convertContext(configJson) {
    const context = configJson.contextProviders?.map((ctx) => {
        return {
            uses: `builtin/${ctx.name}`,
            with: ctx.params,
        };
    }) ?? [];
    return context;
}
function convertCustomCommand(cmd) {
    return {
        name: cmd.name,
        description: cmd.description,
        prompt: cmd.prompt, // The type is wrong in @continuedev/config-types
    };
}
function convertMcp(mcp) {
    const { transport } = mcp;
    const { command, args, env } = transport;
    return {
        command,
        args,
        env,
        name: "MCP Server",
    };
}
function convertDoc(doc) {
    return {
        name: doc.title,
        startUrl: doc.startUrl,
        rootUrl: doc.rootUrl,
        faviconUrl: doc.faviconUrl,
    };
}
export function convertJsonToYamlConfig(configJson) {
    // models
    const models = configJson.models.map((m) => convertModel(m, ["chat"]));
    const autocompleteModels = Array.isArray(configJson.tabAutocompleteModel)
        ? configJson.tabAutocompleteModel
        : configJson.tabAutocompleteModel
            ? [configJson.tabAutocompleteModel]
            : [];
    models.push(...autocompleteModels.map((m) => convertModel(m, ["autocomplete"])));
    if (configJson.embeddingsProvider) {
        models.push(convertEmbeddingsProvider(configJson.embeddingsProvider));
    }
    if (configJson.reranker) {
        models.push(convertReranker(configJson.reranker));
    }
    // context
    const context = convertContext(configJson);
    // mcpServers
    // Types for "experimental" don't exist
    const mcpServers = configJson.experimental?.modelContextProtocolServers?.map(convertMcp);
    // prompts
    const prompts = configJson.customCommands?.map(convertCustomCommand);
    // docs
    const docs = configJson.docs?.map(convertDoc);
    const configYaml = {
        name: "Continue Config",
        version: "0.0.1",
        models,
        context,
        rules: configJson.systemMessage ? [configJson.systemMessage] : undefined,
        prompts,
        mcpServers,
        docs,
    };
    return configYaml;
}
