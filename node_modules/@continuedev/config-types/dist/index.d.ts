import { z } from "zod";
export declare const completionOptionsSchema: z.ZodObject<{
    temperature: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    minP: z.ZodOptional<z.ZodNumber>;
    presencePenalty: z.ZodOptional<z.ZodNumber>;
    frequencyPenalty: z.ZodOptional<z.ZodNumber>;
    mirostat: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    maxTokens: z.ZodOptional<z.ZodNumber>;
    numThreads: z.ZodOptional<z.ZodNumber>;
    useMmap: z.ZodOptional<z.ZodBoolean>;
    keepAlive: z.ZodOptional<z.ZodNumber>;
    raw: z.ZodOptional<z.ZodBoolean>;
    stream: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    minP?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    mirostat?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    numThreads?: number | undefined;
    useMmap?: boolean | undefined;
    keepAlive?: number | undefined;
    raw?: boolean | undefined;
    stream?: boolean | undefined;
}, {
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    minP?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    mirostat?: number | undefined;
    stop?: string[] | undefined;
    maxTokens?: number | undefined;
    numThreads?: number | undefined;
    useMmap?: boolean | undefined;
    keepAlive?: number | undefined;
    raw?: boolean | undefined;
    stream?: boolean | undefined;
}>;
export type CompletionOptions = z.infer<typeof completionOptionsSchema>;
export declare const clientCertificateOptionsSchema: z.ZodObject<{
    cert: z.ZodString;
    key: z.ZodString;
    passphrase: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    cert: string;
    key: string;
    passphrase?: string | undefined;
}, {
    cert: string;
    key: string;
    passphrase?: string | undefined;
}>;
export type ClientCertificateOptions = z.infer<typeof clientCertificateOptionsSchema>;
export declare const requestOptionsSchema: z.ZodObject<{
    timeout: z.ZodOptional<z.ZodNumber>;
    verifySsl: z.ZodOptional<z.ZodBoolean>;
    caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    proxy: z.ZodOptional<z.ZodString>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    clientCertificate: z.ZodOptional<z.ZodObject<{
        cert: z.ZodString;
        key: z.ZodString;
        passphrase: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    }, {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    timeout?: number | undefined;
    verifySsl?: boolean | undefined;
    caBundlePath?: string | string[] | undefined;
    proxy?: string | undefined;
    headers?: Record<string, string> | undefined;
    extraBodyProperties?: Record<string, any> | undefined;
    noProxy?: string[] | undefined;
    clientCertificate?: {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    } | undefined;
}, {
    timeout?: number | undefined;
    verifySsl?: boolean | undefined;
    caBundlePath?: string | string[] | undefined;
    proxy?: string | undefined;
    headers?: Record<string, string> | undefined;
    extraBodyProperties?: Record<string, any> | undefined;
    noProxy?: string[] | undefined;
    clientCertificate?: {
        cert: string;
        key: string;
        passphrase?: string | undefined;
    } | undefined;
}>;
export type RequestOptions = z.infer<typeof requestOptionsSchema>;
export declare const modelDescriptionSchema: z.ZodObject<{
    title: z.ZodString;
    provider: z.ZodEnum<["openai", "anthropic", "cohere", "ollama", "huggingface-tgi", "huggingface-inference-api", "replicate", "gemini", "mistral", "bedrock", "sagemaker", "cloudflare", "azure", "continue-proxy", "nebius", "scaleway"]>;
    model: z.ZodString;
    apiKey: z.ZodOptional<z.ZodString>;
    apiBase: z.ZodOptional<z.ZodString>;
    contextLength: z.ZodOptional<z.ZodNumber>;
    template: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "llama3"]>>;
    completionOptions: z.ZodOptional<z.ZodObject<{
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        minP: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        mirostat: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        maxTokens: z.ZodOptional<z.ZodNumber>;
        numThreads: z.ZodOptional<z.ZodNumber>;
        useMmap: z.ZodOptional<z.ZodBoolean>;
        keepAlive: z.ZodOptional<z.ZodNumber>;
        raw: z.ZodOptional<z.ZodBoolean>;
        stream: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    }>>;
    systemMessage: z.ZodOptional<z.ZodString>;
    requestOptions: z.ZodOptional<z.ZodObject<{
        timeout: z.ZodOptional<z.ZodNumber>;
        verifySsl: z.ZodOptional<z.ZodBoolean>;
        caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        proxy: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
    }, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
    }>>;
    promptTemplates: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    title: string;
    provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
    model: string;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    contextLength?: number | undefined;
    template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
    completionOptions?: {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    systemMessage?: string | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
    } | undefined;
    promptTemplates?: Record<string, string> | undefined;
}, {
    title: string;
    provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
    model: string;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    contextLength?: number | undefined;
    template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
    completionOptions?: {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    systemMessage?: string | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
    } | undefined;
    promptTemplates?: Record<string, string> | undefined;
}>;
export type ModelDescription = z.infer<typeof modelDescriptionSchema>;
export declare const embeddingsProviderSchema: z.ZodObject<{
    provider: z.ZodEnum<["transformers.js", "ollama", "openai", "cohere", "free-trial", "gemini", "continue-proxy", "nebius", "scaleway"]>;
    apiBase: z.ZodOptional<z.ZodString>;
    apiKey: z.ZodOptional<z.ZodString>;
    model: z.ZodOptional<z.ZodString>;
    deployment: z.ZodOptional<z.ZodString>;
    apiType: z.ZodOptional<z.ZodString>;
    apiVersion: z.ZodOptional<z.ZodString>;
    requestOptions: z.ZodOptional<z.ZodObject<{
        timeout: z.ZodOptional<z.ZodNumber>;
        verifySsl: z.ZodOptional<z.ZodBoolean>;
        caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        proxy: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        clientCertificate: z.ZodOptional<z.ZodObject<{
            cert: z.ZodString;
            key: z.ZodString;
            passphrase: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    provider: "openai" | "cohere" | "ollama" | "gemini" | "continue-proxy" | "nebius" | "scaleway" | "transformers.js" | "free-trial";
    model?: string | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    deployment?: string | undefined;
    apiType?: string | undefined;
    apiVersion?: string | undefined;
}, {
    provider: "openai" | "cohere" | "ollama" | "gemini" | "continue-proxy" | "nebius" | "scaleway" | "transformers.js" | "free-trial";
    model?: string | undefined;
    apiKey?: string | undefined;
    apiBase?: string | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    deployment?: string | undefined;
    apiType?: string | undefined;
    apiVersion?: string | undefined;
}>;
export type EmbeddingsProvider = z.infer<typeof embeddingsProviderSchema>;
export declare const uiOptionsSchema: z.ZodObject<{
    codeBlockToolbarPosition: z.ZodOptional<z.ZodEnum<["top", "bottom"]>>;
    fontSize: z.ZodOptional<z.ZodNumber>;
    displayRawMarkdown: z.ZodOptional<z.ZodBoolean>;
    showChatScrollbar: z.ZodOptional<z.ZodBoolean>;
    codeWrap: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    codeBlockToolbarPosition?: "top" | "bottom" | undefined;
    fontSize?: number | undefined;
    displayRawMarkdown?: boolean | undefined;
    showChatScrollbar?: boolean | undefined;
    codeWrap?: boolean | undefined;
}, {
    codeBlockToolbarPosition?: "top" | "bottom" | undefined;
    fontSize?: number | undefined;
    displayRawMarkdown?: boolean | undefined;
    showChatScrollbar?: boolean | undefined;
    codeWrap?: boolean | undefined;
}>;
export type UiOptions = z.infer<typeof uiOptionsSchema>;
export declare const tabAutocompleteOptionsSchema: z.ZodObject<{
    disable: z.ZodBoolean;
    useFileSuffix: z.ZodBoolean;
    maxPromptTokens: z.ZodNumber;
    debounceDelay: z.ZodNumber;
    maxSuffixPercentage: z.ZodNumber;
    prefixPercentage: z.ZodNumber;
    transform: z.ZodOptional<z.ZodBoolean>;
    template: z.ZodOptional<z.ZodString>;
    multilineCompletions: z.ZodEnum<["always", "never", "auto"]>;
    slidingWindowPrefixPercentage: z.ZodNumber;
    slidingWindowSize: z.ZodNumber;
    useCache: z.ZodBoolean;
    onlyMyCode: z.ZodBoolean;
    useRecentlyEdited: z.ZodBoolean;
    disableInFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    useImports: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    disable: boolean;
    useFileSuffix: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    onlyMyCode: boolean;
    useRecentlyEdited: boolean;
    template?: string | undefined;
    transform?: boolean | undefined;
    disableInFiles?: string[] | undefined;
    useImports?: boolean | undefined;
}, {
    disable: boolean;
    useFileSuffix: boolean;
    maxPromptTokens: number;
    debounceDelay: number;
    maxSuffixPercentage: number;
    prefixPercentage: number;
    multilineCompletions: "never" | "always" | "auto";
    slidingWindowPrefixPercentage: number;
    slidingWindowSize: number;
    useCache: boolean;
    onlyMyCode: boolean;
    useRecentlyEdited: boolean;
    template?: string | undefined;
    transform?: boolean | undefined;
    disableInFiles?: string[] | undefined;
    useImports?: boolean | undefined;
}>;
export type TabAutocompleteOptions = z.infer<typeof tabAutocompleteOptionsSchema>;
export declare const slashCommandSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    params: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    params?: Record<string, any> | undefined;
}, {
    name: string;
    description: string;
    params?: Record<string, any> | undefined;
}>;
export type SlashCommand = z.infer<typeof slashCommandSchema>;
export declare const customCommandSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    params: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    params?: Record<string, any> | undefined;
}, {
    name: string;
    description: string;
    params?: Record<string, any> | undefined;
}>;
export type CustomCommand = z.infer<typeof customCommandSchema>;
export declare const contextProviderSchema: z.ZodObject<{
    name: z.ZodString;
    params: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    params: Record<string, any>;
    name: string;
}, {
    params: Record<string, any>;
    name: string;
}>;
export type ContextProvider = z.infer<typeof contextProviderSchema>;
export declare const rerankerSchema: z.ZodObject<{
    name: z.ZodEnum<["cohere", "voyage", "llm", "continue-proxy"]>;
    params: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    name: "cohere" | "continue-proxy" | "voyage" | "llm";
    params?: Record<string, any> | undefined;
}, {
    name: "cohere" | "continue-proxy" | "voyage" | "llm";
    params?: Record<string, any> | undefined;
}>;
export type Reranker = z.infer<typeof rerankerSchema>;
export declare const analyticsSchema: z.ZodObject<{
    provider: z.ZodEnum<["posthog", "amplitude", "segment", "logstash", "mixpanel", "splunk", "datadog", "continue-proxy"]>;
    url: z.ZodOptional<z.ZodString>;
    clientKey: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    provider: "continue-proxy" | "posthog" | "amplitude" | "segment" | "logstash" | "mixpanel" | "splunk" | "datadog";
    url?: string | undefined;
    clientKey?: string | undefined;
}, {
    provider: "continue-proxy" | "posthog" | "amplitude" | "segment" | "logstash" | "mixpanel" | "splunk" | "datadog";
    url?: string | undefined;
    clientKey?: string | undefined;
}>;
export type Analytics = z.infer<typeof analyticsSchema>;
export declare const devDataSchema: z.ZodObject<{
    url: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    url?: string | undefined;
}, {
    url?: string | undefined;
}>;
export type DevData = z.infer<typeof devDataSchema>;
export declare const siteIndexingConfigSchema: z.ZodObject<{
    startUrl: z.ZodString;
    rootUrl: z.ZodString;
    title: z.ZodString;
    maxDepth: z.ZodOptional<z.ZodString>;
    faviconUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    title: string;
    startUrl: string;
    rootUrl: string;
    maxDepth?: string | undefined;
    faviconUrl?: string | undefined;
}, {
    title: string;
    startUrl: string;
    rootUrl: string;
    maxDepth?: string | undefined;
    faviconUrl?: string | undefined;
}>;
export declare const controlPlaneConfigSchema: z.ZodObject<{
    useContinueForTeamsProxy: z.ZodOptional<z.ZodBoolean>;
    proxyUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    useContinueForTeamsProxy?: boolean | undefined;
    proxyUrl?: string | undefined;
}, {
    useContinueForTeamsProxy?: boolean | undefined;
    proxyUrl?: string | undefined;
}>;
export declare const configJsonSchema: z.ZodObject<{
    models: z.ZodArray<z.ZodObject<{
        title: z.ZodString;
        provider: z.ZodEnum<["openai", "anthropic", "cohere", "ollama", "huggingface-tgi", "huggingface-inference-api", "replicate", "gemini", "mistral", "bedrock", "sagemaker", "cloudflare", "azure", "continue-proxy", "nebius", "scaleway"]>;
        model: z.ZodString;
        apiKey: z.ZodOptional<z.ZodString>;
        apiBase: z.ZodOptional<z.ZodString>;
        contextLength: z.ZodOptional<z.ZodNumber>;
        template: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "llama3"]>>;
        completionOptions: z.ZodOptional<z.ZodObject<{
            temperature: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
            minP: z.ZodOptional<z.ZodNumber>;
            presencePenalty: z.ZodOptional<z.ZodNumber>;
            frequencyPenalty: z.ZodOptional<z.ZodNumber>;
            mirostat: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            maxTokens: z.ZodOptional<z.ZodNumber>;
            numThreads: z.ZodOptional<z.ZodNumber>;
            useMmap: z.ZodOptional<z.ZodBoolean>;
            keepAlive: z.ZodOptional<z.ZodNumber>;
            raw: z.ZodOptional<z.ZodBoolean>;
            stream: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        }, {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        }>>;
        systemMessage: z.ZodOptional<z.ZodString>;
        requestOptions: z.ZodOptional<z.ZodObject<{
            timeout: z.ZodOptional<z.ZodNumber>;
            verifySsl: z.ZodOptional<z.ZodBoolean>;
            caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            proxy: z.ZodOptional<z.ZodString>;
            headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
            noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        }, {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        }>>;
        promptTemplates: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    }, {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    }>, "many">;
    tabAutocompleteModel: z.ZodOptional<z.ZodObject<{
        title: z.ZodString;
        provider: z.ZodEnum<["openai", "anthropic", "cohere", "ollama", "huggingface-tgi", "huggingface-inference-api", "replicate", "gemini", "mistral", "bedrock", "sagemaker", "cloudflare", "azure", "continue-proxy", "nebius", "scaleway"]>;
        model: z.ZodString;
        apiKey: z.ZodOptional<z.ZodString>;
        apiBase: z.ZodOptional<z.ZodString>;
        contextLength: z.ZodOptional<z.ZodNumber>;
        template: z.ZodOptional<z.ZodEnum<["llama2", "alpaca", "zephyr", "phi2", "phind", "anthropic", "chatml", "none", "openchat", "deepseek", "xwin-coder", "neural-chat", "codellama-70b", "llava", "gemma", "llama3"]>>;
        completionOptions: z.ZodOptional<z.ZodObject<{
            temperature: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
            minP: z.ZodOptional<z.ZodNumber>;
            presencePenalty: z.ZodOptional<z.ZodNumber>;
            frequencyPenalty: z.ZodOptional<z.ZodNumber>;
            mirostat: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            maxTokens: z.ZodOptional<z.ZodNumber>;
            numThreads: z.ZodOptional<z.ZodNumber>;
            useMmap: z.ZodOptional<z.ZodBoolean>;
            keepAlive: z.ZodOptional<z.ZodNumber>;
            raw: z.ZodOptional<z.ZodBoolean>;
            stream: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        }, {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        }>>;
        systemMessage: z.ZodOptional<z.ZodString>;
        requestOptions: z.ZodOptional<z.ZodObject<{
            timeout: z.ZodOptional<z.ZodNumber>;
            verifySsl: z.ZodOptional<z.ZodBoolean>;
            caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            proxy: z.ZodOptional<z.ZodString>;
            headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
            noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        }, {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        }>>;
        promptTemplates: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    }, {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    }>>;
    embeddingsProvider: z.ZodOptional<z.ZodObject<{
        provider: z.ZodEnum<["transformers.js", "ollama", "openai", "cohere", "free-trial", "gemini", "continue-proxy", "nebius", "scaleway"]>;
        apiBase: z.ZodOptional<z.ZodString>;
        apiKey: z.ZodOptional<z.ZodString>;
        model: z.ZodOptional<z.ZodString>;
        deployment: z.ZodOptional<z.ZodString>;
        apiType: z.ZodOptional<z.ZodString>;
        apiVersion: z.ZodOptional<z.ZodString>;
        requestOptions: z.ZodOptional<z.ZodObject<{
            timeout: z.ZodOptional<z.ZodNumber>;
            verifySsl: z.ZodOptional<z.ZodBoolean>;
            caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            proxy: z.ZodOptional<z.ZodString>;
            headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
            noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            clientCertificate: z.ZodOptional<z.ZodObject<{
                cert: z.ZodString;
                key: z.ZodString;
                passphrase: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            }, {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
            clientCertificate?: {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            } | undefined;
        }, {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
            clientCertificate?: {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        provider: "openai" | "cohere" | "ollama" | "gemini" | "continue-proxy" | "nebius" | "scaleway" | "transformers.js" | "free-trial";
        model?: string | undefined;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
            clientCertificate?: {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            } | undefined;
        } | undefined;
        deployment?: string | undefined;
        apiType?: string | undefined;
        apiVersion?: string | undefined;
    }, {
        provider: "openai" | "cohere" | "ollama" | "gemini" | "continue-proxy" | "nebius" | "scaleway" | "transformers.js" | "free-trial";
        model?: string | undefined;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
            clientCertificate?: {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            } | undefined;
        } | undefined;
        deployment?: string | undefined;
        apiType?: string | undefined;
        apiVersion?: string | undefined;
    }>>;
    reranker: z.ZodOptional<z.ZodObject<{
        name: z.ZodEnum<["cohere", "voyage", "llm", "continue-proxy"]>;
        params: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        name: "cohere" | "continue-proxy" | "voyage" | "llm";
        params?: Record<string, any> | undefined;
    }, {
        name: "cohere" | "continue-proxy" | "voyage" | "llm";
        params?: Record<string, any> | undefined;
    }>>;
    analytics: z.ZodObject<{
        provider: z.ZodEnum<["posthog", "amplitude", "segment", "logstash", "mixpanel", "splunk", "datadog", "continue-proxy"]>;
        url: z.ZodOptional<z.ZodString>;
        clientKey: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        provider: "continue-proxy" | "posthog" | "amplitude" | "segment" | "logstash" | "mixpanel" | "splunk" | "datadog";
        url?: string | undefined;
        clientKey?: string | undefined;
    }, {
        provider: "continue-proxy" | "posthog" | "amplitude" | "segment" | "logstash" | "mixpanel" | "splunk" | "datadog";
        url?: string | undefined;
        clientKey?: string | undefined;
    }>;
    devData: z.ZodObject<{
        url: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
    }, {
        url?: string | undefined;
    }>;
    allowAnonymousTelemetry: z.ZodOptional<z.ZodBoolean>;
    systemMessage: z.ZodOptional<z.ZodString>;
    completionOptions: z.ZodOptional<z.ZodObject<{
        temperature: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        minP: z.ZodOptional<z.ZodNumber>;
        presencePenalty: z.ZodOptional<z.ZodNumber>;
        frequencyPenalty: z.ZodOptional<z.ZodNumber>;
        mirostat: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        maxTokens: z.ZodOptional<z.ZodNumber>;
        numThreads: z.ZodOptional<z.ZodNumber>;
        useMmap: z.ZodOptional<z.ZodBoolean>;
        keepAlive: z.ZodOptional<z.ZodNumber>;
        raw: z.ZodOptional<z.ZodBoolean>;
        stream: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    }, {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    }>>;
    requestOptions: z.ZodOptional<z.ZodObject<{
        timeout: z.ZodOptional<z.ZodNumber>;
        verifySsl: z.ZodOptional<z.ZodBoolean>;
        caBundlePath: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        proxy: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        extraBodyProperties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        noProxy: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        clientCertificate: z.ZodOptional<z.ZodObject<{
            cert: z.ZodString;
            key: z.ZodString;
            passphrase: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }, {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }, {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    }>>;
    slashCommands: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        params: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }, {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }>, "many">>;
    customCommands: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        params: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }, {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }>, "many">>;
    contextProviders: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        params: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        params: Record<string, any>;
        name: string;
    }, {
        params: Record<string, any>;
        name: string;
    }>, "many">>;
    disableIndexing: z.ZodOptional<z.ZodBoolean>;
    tabAutocompleteOptions: z.ZodOptional<z.ZodObject<{
        disable: z.ZodBoolean;
        useFileSuffix: z.ZodBoolean;
        maxPromptTokens: z.ZodNumber;
        debounceDelay: z.ZodNumber;
        maxSuffixPercentage: z.ZodNumber;
        prefixPercentage: z.ZodNumber;
        transform: z.ZodOptional<z.ZodBoolean>;
        template: z.ZodOptional<z.ZodString>;
        multilineCompletions: z.ZodEnum<["always", "never", "auto"]>;
        slidingWindowPrefixPercentage: z.ZodNumber;
        slidingWindowSize: z.ZodNumber;
        useCache: z.ZodBoolean;
        onlyMyCode: z.ZodBoolean;
        useRecentlyEdited: z.ZodBoolean;
        disableInFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        useImports: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disable: boolean;
        useFileSuffix: boolean;
        maxPromptTokens: number;
        debounceDelay: number;
        maxSuffixPercentage: number;
        prefixPercentage: number;
        multilineCompletions: "never" | "always" | "auto";
        slidingWindowPrefixPercentage: number;
        slidingWindowSize: number;
        useCache: boolean;
        onlyMyCode: boolean;
        useRecentlyEdited: boolean;
        template?: string | undefined;
        transform?: boolean | undefined;
        disableInFiles?: string[] | undefined;
        useImports?: boolean | undefined;
    }, {
        disable: boolean;
        useFileSuffix: boolean;
        maxPromptTokens: number;
        debounceDelay: number;
        maxSuffixPercentage: number;
        prefixPercentage: number;
        multilineCompletions: "never" | "always" | "auto";
        slidingWindowPrefixPercentage: number;
        slidingWindowSize: number;
        useCache: boolean;
        onlyMyCode: boolean;
        useRecentlyEdited: boolean;
        template?: string | undefined;
        transform?: boolean | undefined;
        disableInFiles?: string[] | undefined;
        useImports?: boolean | undefined;
    }>>;
    ui: z.ZodOptional<z.ZodObject<{
        codeBlockToolbarPosition: z.ZodOptional<z.ZodEnum<["top", "bottom"]>>;
        fontSize: z.ZodOptional<z.ZodNumber>;
        displayRawMarkdown: z.ZodOptional<z.ZodBoolean>;
        showChatScrollbar: z.ZodOptional<z.ZodBoolean>;
        codeWrap: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        codeBlockToolbarPosition?: "top" | "bottom" | undefined;
        fontSize?: number | undefined;
        displayRawMarkdown?: boolean | undefined;
        showChatScrollbar?: boolean | undefined;
        codeWrap?: boolean | undefined;
    }, {
        codeBlockToolbarPosition?: "top" | "bottom" | undefined;
        fontSize?: number | undefined;
        displayRawMarkdown?: boolean | undefined;
        showChatScrollbar?: boolean | undefined;
        codeWrap?: boolean | undefined;
    }>>;
    docs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        startUrl: z.ZodString;
        rootUrl: z.ZodString;
        title: z.ZodString;
        maxDepth: z.ZodOptional<z.ZodString>;
        faviconUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        startUrl: string;
        rootUrl: string;
        maxDepth?: string | undefined;
        faviconUrl?: string | undefined;
    }, {
        title: string;
        startUrl: string;
        rootUrl: string;
        maxDepth?: string | undefined;
        faviconUrl?: string | undefined;
    }>, "many">>;
    controlPlane: z.ZodOptional<z.ZodObject<{
        useContinueForTeamsProxy: z.ZodOptional<z.ZodBoolean>;
        proxyUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        useContinueForTeamsProxy?: boolean | undefined;
        proxyUrl?: string | undefined;
    }, {
        useContinueForTeamsProxy?: boolean | undefined;
        proxyUrl?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    models: {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    }[];
    analytics: {
        provider: "continue-proxy" | "posthog" | "amplitude" | "segment" | "logstash" | "mixpanel" | "splunk" | "datadog";
        url?: string | undefined;
        clientKey?: string | undefined;
    };
    devData: {
        url?: string | undefined;
    };
    completionOptions?: {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    systemMessage?: string | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    tabAutocompleteModel?: {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    } | undefined;
    embeddingsProvider?: {
        provider: "openai" | "cohere" | "ollama" | "gemini" | "continue-proxy" | "nebius" | "scaleway" | "transformers.js" | "free-trial";
        model?: string | undefined;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
            clientCertificate?: {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            } | undefined;
        } | undefined;
        deployment?: string | undefined;
        apiType?: string | undefined;
        apiVersion?: string | undefined;
    } | undefined;
    reranker?: {
        name: "cohere" | "continue-proxy" | "voyage" | "llm";
        params?: Record<string, any> | undefined;
    } | undefined;
    allowAnonymousTelemetry?: boolean | undefined;
    slashCommands?: {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }[] | undefined;
    customCommands?: {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }[] | undefined;
    contextProviders?: {
        params: Record<string, any>;
        name: string;
    }[] | undefined;
    disableIndexing?: boolean | undefined;
    tabAutocompleteOptions?: {
        disable: boolean;
        useFileSuffix: boolean;
        maxPromptTokens: number;
        debounceDelay: number;
        maxSuffixPercentage: number;
        prefixPercentage: number;
        multilineCompletions: "never" | "always" | "auto";
        slidingWindowPrefixPercentage: number;
        slidingWindowSize: number;
        useCache: boolean;
        onlyMyCode: boolean;
        useRecentlyEdited: boolean;
        template?: string | undefined;
        transform?: boolean | undefined;
        disableInFiles?: string[] | undefined;
        useImports?: boolean | undefined;
    } | undefined;
    ui?: {
        codeBlockToolbarPosition?: "top" | "bottom" | undefined;
        fontSize?: number | undefined;
        displayRawMarkdown?: boolean | undefined;
        showChatScrollbar?: boolean | undefined;
        codeWrap?: boolean | undefined;
    } | undefined;
    docs?: {
        title: string;
        startUrl: string;
        rootUrl: string;
        maxDepth?: string | undefined;
        faviconUrl?: string | undefined;
    }[] | undefined;
    controlPlane?: {
        useContinueForTeamsProxy?: boolean | undefined;
        proxyUrl?: string | undefined;
    } | undefined;
}, {
    models: {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    }[];
    analytics: {
        provider: "continue-proxy" | "posthog" | "amplitude" | "segment" | "logstash" | "mixpanel" | "splunk" | "datadog";
        url?: string | undefined;
        clientKey?: string | undefined;
    };
    devData: {
        url?: string | undefined;
    };
    completionOptions?: {
        temperature?: number | undefined;
        topP?: number | undefined;
        topK?: number | undefined;
        minP?: number | undefined;
        presencePenalty?: number | undefined;
        frequencyPenalty?: number | undefined;
        mirostat?: number | undefined;
        stop?: string[] | undefined;
        maxTokens?: number | undefined;
        numThreads?: number | undefined;
        useMmap?: boolean | undefined;
        keepAlive?: number | undefined;
        raw?: boolean | undefined;
        stream?: boolean | undefined;
    } | undefined;
    systemMessage?: string | undefined;
    requestOptions?: {
        timeout?: number | undefined;
        verifySsl?: boolean | undefined;
        caBundlePath?: string | string[] | undefined;
        proxy?: string | undefined;
        headers?: Record<string, string> | undefined;
        extraBodyProperties?: Record<string, any> | undefined;
        noProxy?: string[] | undefined;
        clientCertificate?: {
            cert: string;
            key: string;
            passphrase?: string | undefined;
        } | undefined;
    } | undefined;
    tabAutocompleteModel?: {
        title: string;
        provider: "openai" | "anthropic" | "cohere" | "ollama" | "huggingface-tgi" | "huggingface-inference-api" | "replicate" | "gemini" | "mistral" | "bedrock" | "sagemaker" | "cloudflare" | "azure" | "continue-proxy" | "nebius" | "scaleway";
        model: string;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        contextLength?: number | undefined;
        template?: "anthropic" | "llama2" | "alpaca" | "zephyr" | "phi2" | "phind" | "chatml" | "none" | "openchat" | "deepseek" | "xwin-coder" | "neural-chat" | "codellama-70b" | "llava" | "gemma" | "llama3" | undefined;
        completionOptions?: {
            temperature?: number | undefined;
            topP?: number | undefined;
            topK?: number | undefined;
            minP?: number | undefined;
            presencePenalty?: number | undefined;
            frequencyPenalty?: number | undefined;
            mirostat?: number | undefined;
            stop?: string[] | undefined;
            maxTokens?: number | undefined;
            numThreads?: number | undefined;
            useMmap?: boolean | undefined;
            keepAlive?: number | undefined;
            raw?: boolean | undefined;
            stream?: boolean | undefined;
        } | undefined;
        systemMessage?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
        } | undefined;
        promptTemplates?: Record<string, string> | undefined;
    } | undefined;
    embeddingsProvider?: {
        provider: "openai" | "cohere" | "ollama" | "gemini" | "continue-proxy" | "nebius" | "scaleway" | "transformers.js" | "free-trial";
        model?: string | undefined;
        apiKey?: string | undefined;
        apiBase?: string | undefined;
        requestOptions?: {
            timeout?: number | undefined;
            verifySsl?: boolean | undefined;
            caBundlePath?: string | string[] | undefined;
            proxy?: string | undefined;
            headers?: Record<string, string> | undefined;
            extraBodyProperties?: Record<string, any> | undefined;
            noProxy?: string[] | undefined;
            clientCertificate?: {
                cert: string;
                key: string;
                passphrase?: string | undefined;
            } | undefined;
        } | undefined;
        deployment?: string | undefined;
        apiType?: string | undefined;
        apiVersion?: string | undefined;
    } | undefined;
    reranker?: {
        name: "cohere" | "continue-proxy" | "voyage" | "llm";
        params?: Record<string, any> | undefined;
    } | undefined;
    allowAnonymousTelemetry?: boolean | undefined;
    slashCommands?: {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }[] | undefined;
    customCommands?: {
        name: string;
        description: string;
        params?: Record<string, any> | undefined;
    }[] | undefined;
    contextProviders?: {
        params: Record<string, any>;
        name: string;
    }[] | undefined;
    disableIndexing?: boolean | undefined;
    tabAutocompleteOptions?: {
        disable: boolean;
        useFileSuffix: boolean;
        maxPromptTokens: number;
        debounceDelay: number;
        maxSuffixPercentage: number;
        prefixPercentage: number;
        multilineCompletions: "never" | "always" | "auto";
        slidingWindowPrefixPercentage: number;
        slidingWindowSize: number;
        useCache: boolean;
        onlyMyCode: boolean;
        useRecentlyEdited: boolean;
        template?: string | undefined;
        transform?: boolean | undefined;
        disableInFiles?: string[] | undefined;
        useImports?: boolean | undefined;
    } | undefined;
    ui?: {
        codeBlockToolbarPosition?: "top" | "bottom" | undefined;
        fontSize?: number | undefined;
        displayRawMarkdown?: boolean | undefined;
        showChatScrollbar?: boolean | undefined;
        codeWrap?: boolean | undefined;
    } | undefined;
    docs?: {
        title: string;
        startUrl: string;
        rootUrl: string;
        maxDepth?: string | undefined;
        faviconUrl?: string | undefined;
    }[] | undefined;
    controlPlane?: {
        useContinueForTeamsProxy?: boolean | undefined;
        proxyUrl?: string | undefined;
    } | undefined;
}>;
export type ConfigJson = z.infer<typeof configJsonSchema>;
